#!/usr/bin/env python
#
# Copyright 2014 Heiko Irrgang
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import csv
import resource
import subprocess
import os.path

_FUCKSPAM_VERSION='0.2'

_PRESET_SPAMMERS=[
        'cn',
        'ua',
        'hk',
        'tw',
        'bg',
        'ro',
        'tr',
        'vn',
        'kh',
        'th',
        'sg',
        'ph',
        'my',
        'kr',
        'in',
        'id',
        'bd',
        'pk',
        ]

_PRESETS={
        'spammers': _PRESET_SPAMMERS,
        }

class BlockInfo:
    def __init__(self):
        self.version = 4
        self.netip = ''
        #~ self.mask = ''

def get_locations_file_name():
    # return "%s/geoipdata/GeoLite2-Country-Locations.csv" % (os.path.dirname(sys.argv[0]))
    return "%s/geoipdata/GeoLite2-Country-CSV_20170801/GeoLite2-Country-Locations-en.csv" % (os.path.dirname(sys.argv[0]))

def get_blocks_file_name():
    #~ return "%s/geoipdata/GeoLite2-Country-Blocks.csv" % (os.path.dirname(sys.argv[0]))
    ipv4 = "%s/geoipdata/GeoLite2-Country-CSV_20170801/GeoLite2-Country-Blocks-IPv4.csv" % (os.path.dirname(sys.argv[0]))
    ipv6 = "%s/geoipdata/GeoLite2-Country-CSV_20170801/GeoLite2-Country-Blocks-IPv4.csv" % (os.path.dirname(sys.argv[0]))
    return[ipv4,ipv6,]

def read_locations_file():
    ret = {}
    ret['data'] = {}
    ret['aliases'] = {}
    hdr = True
    with open(get_locations_file_name(), 'rt') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            if hdr:
                hdr = False
                continue

            if len(row) > 3:
                ret['data'][row[3].lower()] = row
                ret['aliases'][row[4].lower()] = row[3].lower()
    return ret

def get_ids_from_countries(clist, locations):
    ret = {}
    for c in clist:
        c = c.lower()
        if c in locations['data'] or c in locations['aliases']:
            short = ''
            if c in locations['data']:
                short = c
            if c in locations['aliases']:
                short = locations['aliases'][c]
            ret[locations['data'][short][0]] = 1
    return ret.keys()

def get_range(row):
    ret = BlockInfo()
    ret.version = 4
    if ':' in row[0]:
        ret.version = 6
    ret.netip = row[0]
    return ret

def execute_block(blocks):
    if len(blocks) < 1:
        print("Nothing to block");
        sys.exit(0)

    cmd = []

    # TODO ip6 support
    for info in blocks:
        if info.version == 4:
            cmd.append(['iptables','-I','fuckspam','-s','%s' % (info.netip),'-j','DROP'])
        elif info.version == 6:
            cmd.append(['ip6tables','-I','fuckspam','-s','%s' % (info.netip),'-j','DROP'])
    q = ""
    print('\nWARNING:\n\nGoing to block %d IP address blocks in firewall.\n' % (len(cmd)))
    while q != 'yes' and q != 'no':
        if (sys.version_info > (3, 0)):
            q = input("Continue? (yes/no): ")
        else:
            q = raw_input("Continue? (yes/no): ")
        if q != 'yes' and q != 'no':
            print("Which part of (yes/no) didn't you understand?")

    if q != 'yes':
        print("\nABORTED");
        sys.exit(-1)

    ret = subprocess.call(['iptables', '-S', 'fuckspam'])
    ret = subprocess.call(['ip6tables', '-S', 'fuckspam'])
    if ret == 0:
        fret = subprocess.call(['iptables', '-F', 'fuckspam'])
        fret = subprocess.call(['ip6tables', '-F', 'fuckspam'])
        if fret != 0:
            print('\nABORTED\n\nAn error occured while flushing the chain')
            sys.exit(-3)
    else:
        nret = subprocess.call(['iptables', '-N', 'fuckspam'])
        nret = subprocess.call(['ip6tables', '-N', 'fuckspam'])
        if nret != 0:
            print('\nABORTED\n\nAn error occured while creating the chain')
            sys.exit(-4)
        cret = subprocess.call(['iptables','-t','filter','-I','INPUT','-j','fuckspam'])
        cret += subprocess.call(['iptables','-t','filter','-I','FORWARD','-j','fuckspam'])
        cret6 = subprocess.call(['ip6tables','-t','filter','-I','INPUT','-j','fuckspam'])
        cret6 += subprocess.call(['ip6tables','-t','filter','-I','FORWARD','-j','fuckspam'])
        if cret != 0 or cret6 != 0:
            print('\nABORTED\n\nAn error occured inserting the chain to input')
            sys.exit(-5)

    for c in cmd:
        if subprocess.call(c) != 0:
            print('\nABORTING due to errors. Did you run with sudo?')
            sys.exit(-2)


def block_countries(clist):
    locations = read_locations_file()

    ids = get_ids_from_countries(clist, locations)
    blocked = 0
    blocks = []
    for file_name in get_blocks_file_name():
        with open(file_name, 'rt') as csvfile:
            reader = csv.reader(csvfile, delimiter=',', quotechar='"')
            hdr = True
            for row in reader:
                if hdr:
                    hdr = False
                    continue
                if len(row) > 1:
                    if row[1] in ids:
                        rng = get_range(row)
                        # TODO ip6 support
                        if rng.version == 4:
                            blocked += 1
                        blocks.append(rng)
    execute_block(blocks)
    return [blocked, len(ids)]

def print_country_list():
    locations = read_locations_file()

    if len(sys.argv) == 3:
        ps = sys.argv[2].lower()
        if ps in _PRESETS:
            print('Preset %s\nshort:\tlong:' % (ps))
            for ct in _PRESETS[ps]:
                lct = ct.lower()
                for l, s in locations['aliases'].items():
                    if s.lower() == lct:
                        print('%s\t%s' % (lct, l.lower()))
            sys.exit(0)
        else:
            print('Unknown preset: %s' % (ps))
            sys.exit(-6)

    print('short:\tlong:')
    for k in locations['aliases']:
        if len(k):
            print('%s\t%s' % (locations['aliases'][k].lower(), k.lower()))
    sys.exit(0)


def print_help():
    print('fuckspam %s Copyright 2014 Heiko Irrgang' % (_FUCKSPAM_VERSION))
    print('fuckspam %s Nestor Diaz because I dont give a fuck where people is from.' % (_FUCKSPAM_VERSION))
    print('\nBlocks whole countries using iptables and a geoip database, must be executed from a user allowed to use iptables')
    print('\nUsage: fuckspam [params]')
    print('\n--help|-h\t\tShow this help')
    print('--list|-l [preset]\tList available countries (or countries in preset if specified)')
    print('not\t\t\tExclude the followng countries\n\t\t\t(fuckspam not ... does exclude China)')
    print('and\t\t\tApply current mode (block or not block) to following country (optional)')
    print('but\t\t\tFuck the following countries (use after not)')
    print('\nPresets:')
    print('\nspammers\tCountries known spamming a lot')
    print('hackers\t\tCountries known hacking a lot')
    print('\nExamples:')
    print('\nDo not block china, but ukrain, which is also known for spamming:')
    print('\tsudo fuckspam not but ukraine')
    print('\nDo block china, ukraine and republic of korea (note that you can use 2 letter country codes):')
    print('\tsudo fuckspam and ukraine and kr')
    print('\nDo block all spammers and h4x0rs:')
    print('\tsudo fuckspam and spammers and hackers')
    print()
    sys.exit(0)

def get_countries_from_args():
    locations = read_locations_file()
    block = {'cn': 1}
    exclude = {}
    mode = 1
    for i in range(1, len(sys.argv)):
        a = sys.argv[i].lower()
        if a == 'help' or a == '--help' or a == '-h' or a == '/?' or a == '-?':
            print_help()
        elif a == '--list' or a == 'list' or a == '-l':
            print_country_list()
        elif a == 'not':
            if i == 1:
                exclude['CN'] = 1
            mode = 0
        elif a == 'but':
            mode = 1
        elif a == 'and':
            # ignore and, and is just for readability
            pass
        else:
            if mode == 0:
                for longName, shortName in locations['aliases'].items():
                    if longName.lower() == a or shortName.lower() == a:
                        exclude[longName.lower()] = 1
                        exclude[shortName.lower()] = 1

            else:
                if a in _PRESETS:
                    for p in _PRESETS[a]:
                        block[p] = 1
                else:
                    block[a] = 1

    ret = {}
    for k in block.keys():
        if not k in exclude:
            if k in locations['aliases']:
                ret[locations['aliases'][k]] = 1
            else:
                ret[k] = 1

    print("Using block list: %s" % (", ".join(ret.keys())))

    return ret.keys()

def main():
    blocked, count = block_countries(get_countries_from_args())
    print("%d IP blocks blocked from %d countries" % (blocked, count))

if __name__ == "__main__":
    main()
